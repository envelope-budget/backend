# Generated by Django 5.2.1 on 2025-06-03 15:47

from django.db import migrations, models
from django.db.models import Count


def cleanup_duplicate_payees(apps, schema_editor):
    """
    Clean up duplicate payees by keeping the first one and marking others as deleted,
    then updating any transactions that reference the duplicates.
    """
    Payee = apps.get_model("transactions", "Payee")
    Transaction = apps.get_model("transactions", "Transaction")

    # Find all payees that have duplicates (same budget + name combination)
    duplicate_groups = (
        Payee.objects.values("budget", "name")
        .annotate(count=Count("id"))
        .filter(count__gt=1, deleted=False)
    )

    for group in duplicate_groups:
        budget_id = group["budget"]
        name = group["name"]

        # Get all payees in this duplicate group, ordered by creation
        payees = list(
            Payee.objects.filter(
                budget_id=budget_id, name=name, deleted=False
            ).order_by(
                "id"
            )  # Keep the first one created
        )

        if len(payees) <= 1:
            continue

        # Keep the first payee, mark others as deleted
        primary_payee = payees[0]
        duplicate_payees = payees[1:]

        # Update all transactions that reference the duplicate payees
        for duplicate_payee in duplicate_payees:
            Transaction.objects.filter(payee=duplicate_payee).update(
                payee=primary_payee
            )

            # Mark the duplicate as deleted
            duplicate_payee.deleted = True
            duplicate_payee.save()


def reverse_cleanup_duplicate_payees(apps, schema_editor):
    """
    This migration is not easily reversible since we're consolidating data.
    We'll just pass here.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("budgets", "0001_initial"),
        (
            "transactions",
            "0009_transaction_is_transfer_transaction_transfer_account_and_more",
        ),
    ]

    operations = [
        migrations.RunPython(
            cleanup_duplicate_payees,
            reverse_cleanup_duplicate_payees,
        ),
        migrations.AddConstraint(
            model_name="payee",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", False)),
                fields=("budget", "name"),
                name="unique_budget_payee_name",
            ),
        ),
    ]
